---
title: "Best Practices"
---

<style>
div.python pre { background-color: #fdfcff; }
</style>

<style>
div.r pre { background-color: #fffffc; }
</style>





# PEP8

https://www.python.org/dev/peps/pep-0008/#introduction

based on Guido's original Python Style Guide essay, with some additions from Barry's style guide

One of Guido's key insights is that code is read much more often than it is written. As PEP 20 says, "Readability counts".

A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.

- Tabs or Spaces?  
Spaces are the preferred indentation method.  
Tabs should be used solely to remain consistent with code that is already indented with tabs.  
Python 3 disallows mixing the use of tabs and spaces for indentation.

<div class = "row">
<div class = "col-md-6">
<div class = "python">

```{python,echo = T, collapse = TRUE,error=T,eval = FALSE}
# Correct:

# Aligned with opening delimiter.
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

# Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.
def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)

# Hanging indents should add a level.
foo = long_function_name(
    var_one, var_two,
    var_three, var_four)
```

</div>
</div>
<div class = "col-md-6">
<div class = "python">

```{python,echo=T,error=T,eval = FALSE}
# Wrong:

# Arguments on first line forbidden when not using vertical alignment.
foo = long_function_name(var_one, var_two,
    var_three, var_four)

# Further indentation required as indentation is not distinguishable.
def long_function_name(
    var_one, var_two, var_three,
    var_four):
    print(var_one)


```

</div>
</div>
</div>



<div class = "row">
<div class = "col-md-6">
<div class = "python">

```{python,echo = T,error= T,eval = FALSE}
# Correct:

# No extra indentation.
if (this_is_one_thing and
    that_is_another_thing):
    do_something()

# Add a comment, which will provide some distinction in editors
# supporting syntax highlighting.
if (this_is_one_thing and
    that_is_another_thing):
    # Since both conditions are true, we can frobnicate.
    do_something()

# Add some extra indentation on the conditional continuation line.
if (this_is_one_thing
        and that_is_another_thing):
    do_something()
```

</div>
</div>
<div class = "col-md-6">

- Sometimes your statement conditions can be too long to be expressed on a single lin. In this case PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the if-statement. Acceptable options in this situation include examples on the left, but are not exclusive.
</div>
</div>








